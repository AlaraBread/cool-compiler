1 3AC todos
===========

  - figure out wtf we are doing with case
  - emit specific options for built-ins


2 How we do case
================

  Put a lookup table in rodata which tells us if a certain type is a
  child of another type. This makes each check in the case O(1). We do
  have to reorder case statements to start from the most-specific ones.
  This is literally just toposort; copy and paste it again.


3 IRs
=====

3.1 two address code
~~~~~~~~~~~~~~~~~~~~

  two address code is closer to x86 which is good

  probably pretty easy to translate from

  lets us do register allocation pretty much how x86 has it

  division will make us cry


3.2 two address code with register allocation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  things to be careful of: division


3.3 x86-64?
~~~~~~~~~~~


4 object layout
===============

4.1 per-class
~~~~~~~~~~~~~

   vtable     
  ------------
   &method1   
   ...        
   &methodn   

  type_id is a sequentially increasing number for each class. probably
  0-n lexographically


4.2 per-object
~~~~~~~~~~~~~~

   object        
  ---------------
   size (bytes)
   type tag
   ptr to vtable 
   &attribute0
   &attribute1   

4.3 string
~~~~~~~~~~~~~~

   string
  ---------------
   size (bytes)
   type tag
   ptr to vtable
   &contents
   length
   capacity

5 activation records
====================

   ar                 
  --------------------
   caller’s           
  --------------------
   parameter n        
   ...                
   parameter 6        
  --------------------
   callee’s           
  --------------------
   return address     
   saved rbp          
   callee saved regs  
   parameter 0
   ...
   parameter (up to) 5
   temporaries        

  We always keep &self in r15 as well.

5.1 function parameters
~~~~~~~~~~~~~~~~~~~~~~~

  passed in rdi, rsi, rdx, rcx, r8, r9, then the stack

  note: we keep a pointer to self as the first parameter


5.2 caller-saved registers
~~~~~~~~~~~~~~~~~~~~~~~~~~

  rbx, rsp, rbp, r12, r13, r14, and r15


5.3 callee-saved registers
~~~~~~~~~~~~~~~~~~~~~~~~~~

  everything else lol


5.4 return value
~~~~~~~~~~~~~~~~

  in rax


6 general asm notes
===================

  always just store stuff in memory

7 optimization ideas
====================
- General
  - unbox integers, bools
  - write an interpreter lmfao
- InputIr
  - expression rebalancing?
  - inlining method calls?
  - constant string merging?
  - if we do a call on a type without subtypes, we can do a static call
- Cfg Ssa
  - dead code elimination + constant folding until fixed point
  - we can probably do a *lot* of constructors at compile time?
  - common subexpression elimination
  - figuring out possible dynamic types for things: allows for static dispatches, makes case cheaper
  - liveness analysis
  - can be void
- Twac
  - Optimize conditional statements where we construct temporary bools e.g. if (x < y) (maybe not worth it? saves some register pressure)
- TwacR
  - register allocation
  - peephole stuff
- AssemblyIr
  - jump threading
  - peephole stuff
  - basic instruction selection

8 order to do optimizations
===========================
- dead code elimination
- constant folding
- if we know a method is not redefined in any of the possible receivers, we can statically call it at the shared supertype
- instruction scheduling
- unboxing integers, bools
- register allocation
- we can delete methods/classes not in the call graph from main
- write an interpreter
- common subexpression elimination
- peephole stuff
- basic instruction selection
- tail call optimization (abi passion project so her rosetta is better)

9 pointer tagging
=================
pointers:
00000000 00000000 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
ints:
11000000 00000000 00000000 00000000 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
false:
10100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
true:
10110000 00000000 00000000 00000000 00000000 00000000 00000000 00000000

advantages:
- check high bit for if its a pointer
- check second bit for int
- check third bit for bool
- check fourth bit for true/false
- bools compare correctly with 64 bit compare
- for integers we use 32 bit compare (32 bit compares do not clear high bits)

10 Pipeline
===========
InputIr
=> Trac Variable
=> Trac SsaVariable
=> Cfg Trac
=> Cfg [TwacStatement]
=> Cfg (AssemblyIr SsaVariable)
=> Cfg (AssemblyIr Register)
=> AssemblyIr Register
